buildscript {
    repositories {
        jcenter()
        maven {
            name = 'oss-sonatype-public'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"

version = modVersion
group = modGroup
archivesBaseName = modBaseName

targetCompatibility = 1.8
sourceCompatibility = 1.8

minecraft {
    version = project.forgeVersion
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = project.mcpVersion
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    def args = [
            "-Dfml.coreMods.load=com.continuum.nova.coremod.NovaForgeCoreMod", //the core mod class, needed for mixins
            "-Dmixin.env.compatLevel=JAVA_8", //needed to use java 8 when using mixins
            "-Dmixin.debug.verbose=true", //verbose mixin output for easier debugging of mixins
            "-Dmixin.debug.export=true", //export classes from mixin to runDirectory/.mixin.out
            "-XX:-OmitStackTraceInFastThrow", //without this sometimes you end up with exception with empty stacktrace
            "-Dmixin.checks.interfaces=true", //check if all interface methods are overriden in mixin
            "-ea", //enable assertions
            "-da:io.netty..." //disable netty assertions because they sometimes fail
    ]

    clientJvmArgs.addAll(args)
    serverJvmArgs.addAll(args)
}

repositories {
    mavenCentral()
    maven {
        name = 'sponge'
        url = 'http://repo.spongepowered.org/maven/'
    }
}

dependencies {
    compile("org.spongepowered:mixin:0.7.8-SNAPSHOT") {
        transitive = false
    }
    compile group: 'io.github.java-graphics', name: 'glm', version: '1.0.1'
}

mixin {
    add sourceSets.main, "mixins.nova.refmap.json"
}

jar {
    manifest {
        attributes(
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "mixins.nova.json",
                "FMLAT": "nova_at.cfg",
                "FMLCorePlugin": "com.continuum.nova.coremod.NovaForgeCoreMod"
        )
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}

runClient.outputs.upToDateWhen { false }
runClient.standardOutput = System.out